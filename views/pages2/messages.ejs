<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Messages</title>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/private.css">
    <link rel="icon" type="image/x-icon" href="/assets/favicon/cclogo.png">
    <!-- Fonts -->
    <script src="https://kit.fontawesome.com/e4a2ea9e4b.js" crossorigin="anonymous"></script>
</head>


<body class="font-Inter  overflow-hidden">
    <div class="grid grid-cols-1 lg:grid-cols-6 h-screen ">
        <!-- SideBar -->
        <aside class="col-span-1 bg-blue py-4 lg:h-screen hidden lg:block leftLoad ">
            <!-- logo -->
            <div class="text-white lg:text-center lg:ml-0 ml-4 lg:py-2 ">
                <span class="title text-4xl mt-4">CCHub</span>

            </div>


            <!-- Navigation -->
            <div class=" navigation">
                <ul class="text-white text-2xl text-center flex flex-col  mt-10">
                    <li class="customHover">
                        <a href="/dash">Dashboard</a>
                    </li>
                    <li class="customHover ">
                        <a href="/events">Events</a>
                    </li>
                    <li class="customHover ">
                        <a href="/communities">Communities</a>
                    </li>
                    <li class="customHover  bg-white text-black ml-4 rounded-l-2xl">
                        <a href="/messages">Messages</a>
                    </li>
                    <!-- <li class="customHover">
                        <a href="myCollege.html">My College</a>
                    </li> -->
                    <li class=" flex justify-center items-center gap-x-2 cursor-pointer mt-2" id="LogOut">
                       <a href="/logout">LogOut</a> <i class="fa-solid fa-right-from-bracket fa-xs text-violet"></i>
                    </li>
                </ul>
            </div>

        </aside>

        <!-- Main -->
        <main class="col-span-5 overflow-hidden">

            <!-- Mobile Header -->
            <div
                class="top-0 left-0 bg-blue lg:hidden py-5 pl-3 flex flex-row justify-between items-center sticky z-20">
                <span class="text-4xl text-white  ">
                    CCHub
                </span>

                <div class="mr-4">
                    <button class="bg-white p-2 rounded-sm" id="MenuShowBtn">
                        <i class="fa-solid fa-bars" style="color: #10107b;"> </i>
                    </button>
                </div>


                <!-- Mobile Navbar -->
                <div class="absolute top-0 right-0 text-white bg-blue px-6 text-3xl pb-4  pt-2 rounded-l-sm hidden mblNavbar "
                    id="MobileMenu">
                    <div>
                        <div class="flex flex-row justify-between items-center mt-2">
                            <div class="flex flex-row">
                                <a href="/profile" class="flex flex-row"><img src="img1/profle-picture.png"
                                        alt="" class="h-12 w-12 rounded-full">
                                    <div class="ml-1 flex flex-col">
                                        <h3 class="text-lg"><%= Name %></h3>
                                        <span class="text-xs opacity-[0.8]"><%= Role %></span>
                                    </div>
                                </a>


                            </div>
                            <div>
                                <button class="bg-white px-1  rounded-sm " id="MenuCloseBtn">
                                    <i class="fa-solid fa-xmark fa-xs self-center mt-1" style="color: #072964;"></i>

                                </button>
                            </div>

                        </div>
                        <ul class="px-4 text-xl">

                            <a href="/dash">
                                <li class="mt-6"> <i class="fa-solid fa-user fa-sm mr-2"
                                        style="color: #ffffff;"></i>Dashboard</li>
                            </a>
                            <a href="/events">
                                <li class="mt-6"><i class="fa-regular fa-calendar fa-sm mr-2"
                                        style="color: #ffffff;"></i>Events</li>
                            </a>
                            <a href="/communities">
                                <li class="mt-6"><i class="fa-solid fa-user-group fa-sm mr-2"
                                        style="color: #ffffff;"></i>Communities</li>
                            </a>
                            <a href="/messages">
                                <li class="mt-6"><i class="fa-solid fa-message fa-sm mr-2"
                                        style="color: #ffffff;"></i>Messages</li>
                            </a>

                            <!-- <a href="myCollege.html">
                                <li class="mt-6"><i class="fa-solid fa-building-columns fa-sm mr-2"
                                        style="color: #ffffff;"></i>My College</li>
                            </a> -->
                            <a href="/logout">
                                <li class="mt-6"><i class="fa-solid fa-right-from-bracket fa-xs mr-2"></i>LogOut</li>
                            </a>

                        </ul>
                    </div>
                </div>

            </div>


            <!-- Header -->
            <header class="shadow-md hidden lg:grid grid-cols-3 px-4 py-4">
                <div>
                    <span class="text-3xl font-thin opacity-80">Messages</span>
                </div>

                <!-- Search Bar -->
                <div>

                </div>
                <!-- Profile Info -->
                <div class="flex justify-end items-center">
                    <!-- Bell Icon -->
                    <!-- <i class="fa-solid fa-xl fa-bell mr-12"></i> -->
                    <!-- Profile Info -->
                    <div class="flex flex-col mr-6 ">
                        <h3 class="text-xl"><%= Name %></h3>
                        <h6 class="text-sm text-end"><%= Role %></h6>
                    </div>
                    <!-- Proifle Picture -->
                    <a href="/profile"><img src="img1/profle-picture.png" alt="Profile Picture"
                            class="h-12 w-12  rounded-full cursor-pointer"></a>


                </div>

            </header>

            <section class="grid  grid-cols-1 lg:grid-cols-4">
                <section class="p-2 col-span-1  ">
                    <div class="">
                        <span class="text-3xl text-violet">
                            Chats
                        </span>

                    </div>
                    <!-- <div class="bg-stone p-1  ">
                        <div class="bg-white flex items-center justify-between  ">
                            <input type="text " class="w-3/4 p-1 focus:outline-none" placeholder="Search user">
                            <div class="px-4">
                                <i class="fa-solid fa-magnifying-glass cursor-pointer"></i>
                            </div>

                        </div>
                    </div> -->

                    <div class="mt-4 flex flex-col gap-y-2 ">
                        <!-- chat 1 -->
                        <div class="p-1 actChat cursor-pointer bg-blue text-white act" id="bot">
                            <div class="px-1  flex flex-row items-center">
                                <img src="img1/bot.jpg" alt="" class="h-12 w-12 rounded-full">
                                <div class="px-2">
                                    <span class="text-xl">Chat Bot</span>
                                </div>
                            </div>
                        </div>
                        <!-- chat = Community -->
                        <%- include('../components/messages/GroupCard') %>
                        <hr class="mt-1 text-stone">

                        <!-- user chats -->
                        <div class="overflow-y-scroll h-44">

                            <!-- chat 3 -->
                            <!-- <div class="mt-1 p-1 actChat cursor-pointer human">
                                <div class="px-1 flex flex-row items-center">
                                    <img src="img1/profle-picture.png" alt="" class="h-12 w-12 rounded-full">
                                    <div class="px-2 flex items-start flex-col justify-center">
                                        <span class="text-xl">Harsh Yadav</span>
                                        <h3>Backend Developer</h3>
                                    </div>
                                </div>
                            </div> -->

                            <%- include('../components/messages/ChatCard') %>



                        </div>


                    </div>

                </section>

                <!-- message field with the chat bot -->
                <section class="col-span-3 bg-stone h-screen gap-2" id="Chats">
                    <div class="bg-blue text-white p-2 flex flex-row justify-between">
                        <div class="flex items-center gap-2" id="chatField">
                            <img src="img1/bot.jpg" alt="" class="h-16 w-16 rounded-full">
                            <div>
                                <span class="text-2xl">Let me help you with your tasks!</span>
                            </div>
                        </div>
                        <!-- chats toggle to normal and assign tasks -->
                        <div class="flex justify-center items-center" id="botToggle">
                            <label class="inline-flex items-center cursor-pointer">

                                <input type="checkbox" value="" class="sr-only peer">
                                <span class="ms-3 text-md font-normal text-white dark:text-gray-300 mr-2">Chat</span>
                                <div
                                    class="relative w-11 h-6 bg-violet rounded-full peer peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 dark:bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600">
                                </div>
                                <span class="ms-3 text-md font-normal text-white dark:text-gray-300">Assign Tasks</span>
                            </label>
                        </div>
                    </div>

                    <!-- chats -->
                    <%- include('../components/messages/connectMessageCard') %>

                    <!-- send -->
                    <div class="bg-l-sky-blue px-2   flex justify-center items-center" style="height: 80px;">

                        <div class="w-full flex items-center justify-center px-4">
                            <input type="text" class=" w-3/4 p-2 rounded-lg focus:outline-none text-lg font-thin" id="chatInput">
                            <div class="">
                                <button class="ml-4 bg-blue text-white py-2 px-4 rounded-lg" onclick="sendMessage('chatInput','#chatField')"><span
                                        class="font-thin text-lg">Send</span>
                                    <i class="fa-solid fa-paper-plane"></i>
                                </button>
                            </div>

                        </div>

                    </div>

    


                </section>

                 <!-- community group chat field -->
                 <section class="col-span-3 bg-stone h-screen gap-2 hidden" id="grpChats">
                    <div class="bg-blue text-white p-2 flex flex-row justify-between">
                        <div class="flex items-center gap-2" id="groupField">
                            <img src="img1/group.jpg" alt="" class="h-16 w-16 rounded-full">
                            <div>
                                <span class="text-2xl">Community Group</span>
                            </div>
                        </div>
                        <!-- chats toggle to normal and assign tasks -->
                        <!-- <div class="flex justify-center items-center">
                            <label class="inline-flex items-center cursor-pointer">

                                <input type="checkbox" value="" class="sr-only peer">
                                <span class="ms-3 text-md font-normal text-white dark:text-gray-300 mr-2">Chat</span>
                                <div
                                    class="relative w-11 h-6 bg-violet rounded-full peer peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 dark:bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600">
                                </div>
                                <span class="ms-3 text-md font-normal text-white dark:text-gray-300">Assign Tasks</span>
                            </label>
                        </div> -->
                    </div>

                    <!-- chats -->
                    <%- include('../components/messages/groupMessageCard') %>

                    <!-- send -->
                    <div class="bg-l-sky-blue px-2   flex justify-center items-center" style="height: 80px;">

                        <div class="w-full flex items-center justify-center px-4">
                            <input type="text" class=" w-3/4 p-2 rounded-lg focus:outline-none text-lg font-thin" id="groupInput">
                            <div class="">
                                <button class="ml-4 bg-blue text-white py-2 px-4 rounded-lg" onclick="sendMessage('groupInput','#groupField')"><span
                                        class="font-thin text-lg">Send</span>
                                    <i class="fa-solid fa-paper-plane"></i>
                                </button>
                            </div>

                        </div>

                    </div>

    


                </section>

            </section>





    </main>
    </div>

</body>

<script src="/socket.io/socket.io.js"></script>
<script>
    const socket = io();

    const Name = `<%= Name %>`;
    const ID = `<%= ID %>`;
    socket.emit("loggedIn", ID);
    console.log(Name);
    console.log(ID);

    //mobile
    const MenuShowBtn = document.querySelector('#MenuShowBtn');
    const MobileMenu = document.querySelector('#MobileMenu');
    const MenuCloseBtn = document.querySelector('#MenuCloseBtn');


    MenuShowBtn.addEventListener('click', disMenu);
    MenuCloseBtn.addEventListener('click', hideMenu)

    function disMenu() {
        MobileMenu.classList.toggle('hidden');
    }

    function hideMenu() {
        MobileMenu.classList.toggle('hidden');
    }





    //LogOut
    const LogOut = document.getElementById('LogOut')


    LogOut.addEventListener('click', function () {
        confirm('Are you sure to LogOut?');

    })





    //active chats
    const chatList = document.querySelectorAll('.actChat');


    chatList.forEach(e => {
        e.addEventListener('click', () => {
            document.querySelector('.act')?.classList.remove('text-white', 'bg-blue', 'act');
            e.classList.add('bg-blue', 'text-white', 'act');


        })
    })
    // console.log(chatList)


    const bot = document.getElementById('bot');
    // const group = document.getElementsByClassName('group');
    // const human = document.getElementsByClassName('human');
    const toggle = document.getElementById('botToggle');    
    const grpChats = document.getElementById('grpChats');    
    const botChats = document.getElementById('Chats');    

    // Find the span element within the "Chats" section
    // const spanElement = querySelectorAll('span.text-2xl');


    // console.log(human);

    bot.addEventListener('click',()=>{
        if(botChats.classList.contains('hidden')){
            botChats.classList.remove('hidden');
            grpChats.classList.add('hidden');
        }
        if(toggle.classList.contains('hidden')){
                toggle.classList.remove('hidden');
        }

                    // Update the image URL and span text
        let botFieldImg = document.querySelector('#chatField img');
        let botFieldSpan = document.querySelector('#chatField span');

        // Update the image URL
        botFieldImg.src = "img1/bot.jpg";

        // Update the span text
        botFieldSpan.textContent = "Let me help you with your tasks!";
        // else{
        //     botChats.classList.add('hidden');
        //     grpChats.classList.remove('hidden');
        // }
    })


document.addEventListener('DOMContentLoaded', function() {
    // Add event listener to all elements with the 'group' class
    const groups = document.querySelectorAll('.group');
    groups.forEach(function(group) {
        group.addEventListener('click', function() {
            // Get the capitalized string from the clicked group
            const groupName = this.querySelector('.text-xl').textContent;
            
            // Update the image URL and span text
            const groupFieldImg = document.querySelector('#groupField img');
            const groupFieldSpan = document.querySelector('#groupField span');

            // Update the image URL
            groupFieldImg.src = this.querySelector('img').src;

            // Update the span text
            groupFieldSpan.textContent = groupName;

            //Send Socket
            console.log(groupName);
            socket.emit("joinGroup", groupName);



            // Toggle visibility of chat sections
            if(grpChats.classList.contains('hidden')) {
                grpChats.classList.remove('hidden');
                botChats.classList.add('hidden');
            }
            if(!toggle.classList.contains('hidden')) {
                toggle.classList.add('hidden');
            }
            console.log('Group clicked!');
        });
    });

    // Add event listener to all elements with the 'human' class
    const humans = document.querySelectorAll('.human');
    humans.forEach(function(human) {
        human.addEventListener('click', function() {
            // Get the capitalized string from the clicked group
            const chatName = this.querySelector('.text-xl').textContent;
            
            // Update the image URL and span text
            const chatFieldImg = document.querySelector('#chatField img');
            const chatFieldSpan = document.querySelector('#chatField span');

            // Update the image URL
            chatFieldImg.src = this.querySelector('img').src;

            // Update the span text
            chatFieldSpan.textContent = chatName;

            socket.emit("joinChat", {chatName: chatName.trim(), MyId: ID});

            // Toggle visibility of chat sections
            if(botChats.classList.contains('hidden')) {
                botChats.classList.remove('hidden');
                grpChats.classList.add('hidden');
            }
            if(!toggle.classList.contains('hidden')) {
                toggle.classList.add('hidden');
            }
            console.log("Human clicked!");
        });
    });

});



function sendMessage(idTagInput,idTagField) {
    console.log(idTagField,idTagInput);
    const messageInput = document.getElementById(idTagInput);
    const message = messageInput.value.trim(); // Extract message from input
    let date = new Date();
    // console.log(date);
    const currentTime = getTime(date); // Get current time in "hh:mm" format
    sendingMessage(message, currentTime, idTagField); // Call your existing function with message and time
    let To = document.querySelector(idTagField+' span').textContent.trim();
    console.log(To);
    if(To.includes("Community")){       //Send Message to Group
        let slicedPart = To.split('- ')[1];
        slicedPart = slicedPart.toLowerCase()
        console.log(slicedPart); 
        let groupData = `<%= Groups %>`
        groupData.forEach((group) => {
            if(group.GroupName === slicedPart){
                let ide = `<%= ID %>`
                let data = {
                    GroupId: group.GroupID,
                    from: ide,
                    message: message,
                    time: currentTime
                }
                // socket.emit("Group sendMessage",data)
            }
        });
    }
    else {
        let friendData = ([`<%= Friend %>`]);
        if(To === 'Let me help you with your tasks!'){
            console.log("Bot");
        }
        else{
            // friendData.forEach((user) => {
            //     if (To === user.Name) {
            //         console.log(user);
            //     }
            // })()
            socket.emit("personalMessage", {FromUser:Name,FromId:ID,ToUser:To,Message:message,Time:currentTime});
        }
    }
    messageInput.value = ''; // Clear input field after sending message
}

function sendLoadMessage(idTagInput,idTagField) {
    console.log(idTagField,idTagInput);
    const messageInput = document.getElementById(idTagInput);
    let message = ""
    if (messageInput) {
        message = messageInput.value.trim();
        // Proceed with further processing
    } else {
        console.error('Message input element not found');
    }
    let date = new Date();
    // console.log(date);
    const currentTime = getTime(date); // Get current time in "hh:mm" format
    sendingMessage(message, currentTime, idTagField); // Call your existing function with message and time
    let To = document.querySelector(idTagField+' span').textContent;
    console.log(To);
    if(To.includes("Community")){       //Send Message to Group
        let slicedPart = To.split('- ')[1];
        slicedPart = slicedPart.toLowerCase()
        console.log(slicedPart); 
        let groupData = `<%= Groups %>`
        groupData.forEach((group) => {
            if(group.GroupName === slicedPart){
                let ide = `<%= ID %>`
                let data = {
                    GroupId: group.GroupID,
                    from: ide,
                    message: message,
                    time: currentTime
                }
                // socket.emit("Group sendMessage",data)
            }
        });
    }
    else {
        let friendData = ([`<%= Friend %>`]);
        if(To === 'Let me help you with your tasks!'){
            console.log("Bot");
        }
        else{
            friendData.forEach((user) => {
                if (To === user.Name) {
                    console.log(user);
                }
            })
        }
    }
    messageInput.value = ''; // Clear input field after sending message
}



function getTime(date) {
    const now = date;
    const hours = String(now.getHours()).padStart(2, '0'); // Get hours with leading zero
    const minutes = String(now.getMinutes()).padStart(2, '0'); // Get minutes with leading zero
    return `${hours}:${minutes}`;
}


//Send and Receive Message

const parent1Element = document.getElementById('personalPlay');
const parent2Element = document.getElementById('groupPlay');

function sendingMessage(spanText, h5Text, idTagField) {
    const div = document.createElement('div');
    div.classList.add('mt-4', 'px-2', 'flex', 'justify-end', 'items-end');

    const innerDiv = document.createElement('div');
    innerDiv.classList.add('w-3/4');

    // let currentFieldImg = document.querySelector('#chatField img');
    let currentFieldSpan = document.querySelector(idTagField+' span');

    // // Update the image URL
    // let url = currentFieldImg.src;

    // Update the span text
    let currentChat = currentFieldSpan.textContent;
    let type = idTagField === '#chatField' ? 'Normal' : 'Group'

    let  newChat = {
        dataType: type,
        To: currentChat,
        fromName: Name,
        fromId: ID,
        Message: spanText,
        Time: h5Text 
    }
    // socket.emit("SendMessage", newChat);

    const span = document.createElement('span');
    span.classList.add('bg-white', 'p-2', 'rounded-md', 'text-xl', 'flex');
    span.textContent = spanText;

    const h5 = document.createElement('h5');
    h5.classList.add('mt-2', 'text-sm', 'text-end');
    h5.textContent = h5Text;
    // console.log(currentChat);

    innerDiv.appendChild(span);
    innerDiv.appendChild(h5);
    div.appendChild(innerDiv);
    if(idTagField == '#chatField'){
        parent1Element.append(div);
    }
    else{
        parent2Element.append(div);
    }

    return div;
}

function receiverPersonalMessage(spanText, h5Text) {
    const div = document.createElement('div');
    div.classList.add('mt-4', 'px-2');

    const innerDiv = document.createElement('div');

    const span = document.createElement('span');
    span.classList.add('bg-white', 'p-2', 'rounded-md', 'text-xl');
    span.textContent = spanText;

    const h5 = document.createElement('h5');
    h5.classList.add('mt-2', 'text-sm');
    h5.textContent = h5Text;

    innerDiv.appendChild(span);
    innerDiv.appendChild(h5);
    div.appendChild(innerDiv);
    parent1Element.append(div)
    return div;
}

function receiverGroupMessage(fromName,spanText, h5Text) {
    const div = document.createElement('div');
    div.classList.add('mt-4', 'px-2','w-3/4');

    const fromDiv = document.createElement('div');
    fromDiv.classList.add('text-black', 'font-semibold');
    fromDiv.textContent = fromName;

    const innerDiv = document.createElement('div');

    const span = document.createElement('span');
    span.classList.add('bg-white', 'p-2', 'rounded-md', 'text-xl');
    span.textContent = spanText;

    const h5 = document.createElement('h5');
    h5.classList.add('mt-2', 'text-sm');
    h5.textContent = h5Text;

    innerDiv.appendChild(span);
    innerDiv.appendChild(h5);
    div.appendChild(innerDiv);
    div.appendChild(fromDiv);
    parent2Element.append(div);
    return div;
}

function groupORchat(){
    if (grpChats.classList.contains('hidden')) {

        let Field = document.querySelector('#chatField span');

        // Update the span text
        let To = Field.textContent;
        let data = {
            dataType: 'Normal',
            To: To,
            idFieldTag: 'chatField',
            parent: parent1Element
        }
        return data;
        // return 'Bot';
    } else if (botChats.classList.contains('hidden')) {

        let Field = document.querySelector('#groupField span');

        // Update the span text
        let To = Field.textContent;
        let data = {
            dataType: 'Group',
            To: To,
            idFieldTag: 'groupField',
            parent:  parent2Element
        }
        return data;
        // return 'Group';
    }
}


function emptyDivs(parent) {
    // const parent = document.getElementById(parentId); // Get the parent element by ID
    if (!parent) {
        console.error('Parent element not found');
        return;
    }

    // Loop through each child node of the parent
    while (parent.firstChild) {
        // Remove the first child node (div element) of the parent
        parent.removeChild(parent.firstChild);
    }
}

    // socket.on('receiveMessage', (message,fromId) => {

    // })

    //   Receiving a Message from

    socket.on("loadChats", (chats)=>{
        console.log(chats);
        let focus = groupORchat();
        if(focus.dataType === "Group"){
            emptyDivs(parent2Element)
            chats.forEach(data => {
                if(data.FromUser === Name){
                    sendingMessage(data.Message, data.Time, '#groupField' );
                }
                else{
                    receiverGroupMessage(data.FromUser, data.Message, data.Time);
                }
            });
        }
        else{
            emptyDivs(parent1Element);
            chats.forEach(data => {
                if(data.FromUser === Name){
                    sendingMessage(data.Message, data.Time, '#chatField' );
                }
                else{
                    receiverPersonalMessage(data.Message, data.Time);
                }
            });
        }
    });


</script>

</html>